import os
import re
import json
import sqlite3
from urllib.parse import urlparse
from datetime import datetime
from contextlib import closing
from database import init_db

DB_NAME = "cian_bot.db"

def ensure_output_dir():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É output –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    os.makedirs("output", exist_ok=True)

def clear_parsing_data():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    files_to_remove = [
        get_region_file(),
        get_phones_file(),
        "output/phones.txt"
    ]
    
    for file_path in files_to_remove:
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

def get_region_name():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return get_setting('region', '–¢—é–º–µ–Ω—å')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¢—é–º–µ–Ω—å

def get_region_id():
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return get_setting('region_id', '4827')  # ID –¢—é–º–µ–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def get_rooms():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç"""
    rooms_str = get_setting('rooms', '1,2,3,4')
    return [int(room) for room in rooms_str.split(',')] if rooms_str else []

def get_min_floor():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ç–∞–∂–∞"""
    value = get_setting('min_floor', '')
    return [int(f) for f in value.split(',')] if value else []

def get_max_floor():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ç–∞–∂–∞"""
    value = get_setting('max_floor', '')
    return [int(f) for f in value.split(',')] if value else []

def get_min_price():
    """–ü–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É"""
    value = get_setting('min_price', '')
    return int(value) if value else None

def get_max_price():
    """–ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É"""
    value = get_setting('max_price', '')
    return int(value) if value else None

def set_region(region_name, region_id):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
    set_setting('region', region_name)
    set_setting('region_id', region_id)
    clear_parsing_data()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ

def set_rooms(rooms):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã"""
    set_setting('rooms', ','.join(map(str, rooms)))
    clear_parsing_data()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ

def set_min_floor(floors):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —ç—Ç–∞–∂–∏"""
    value = ','.join(map(str, floors)) if floors else ''
    set_setting('min_floor', value)
    clear_parsing_data()

def set_max_floor(floors):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —ç—Ç–∞–∂–∏"""
    value = ','.join(map(str, floors)) if floors else ''
    set_setting('max_floor', value)
    clear_parsing_data()

def set_min_price(price):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É"""
    set_setting('min_price', str(price) if price is not None else '')
    clear_parsing_data()

def set_max_price(price):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É"""
    set_setting('max_price', str(price) if price is not None else '')
    clear_parsing_data()

def reset_settings():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
    with closing(sqlite3.connect(DB_NAME)) as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM settings")
        conn.commit()
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    init_db()
    clear_parsing_data()
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    set_setting('schedule_time', config.SCHEDULE_TIME)

def get_region_file():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å ID —Ä–µ–≥–∏–æ–Ω–∞"""
    region_id = get_region_id()
    return f"output/regions_{region_id}.json"

def get_phones_file():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –Ω–æ–º–µ—Ä–∞–º–∏"""
    return "output/data.json"

def get_lock_file():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ lock-—Ñ–∞–π–ª—É"""
    return "output/parsing.lock"

def start_parsing():
    """–°–æ–∑–¥–∞–µ—Ç lock-—Ñ–∞–π–ª –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    ensure_output_dir()
    with open(get_lock_file(), 'w') as f:
        f.write("parsing in progress")

def finish_parsing():
    """–£–¥–∞–ª—è–µ—Ç lock-—Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    lock_file = get_lock_file()
    if os.path.exists(lock_file):
        os.remove(lock_file)

def is_parsing_in_progress():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä—Å–∏–Ω–≥"""
    return os.path.exists(get_lock_file())

def extract_id_from_url(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ URL"""
    match = re.search(r'/(\d+)/?$', url)
    return match.group(1) if match else None

def extract_urls_from_regions(author_type=None):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ñ–∞–π–ª–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø—É –∞–≤—Ç–æ—Ä–∞"""
    region_file = get_region_file()
    
    if not os.path.exists(region_file):
        return []
    
    try:
        with open(region_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        if "data" in data:
            ads_data = data["data"]
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            ads_data = data
        
        urls = []
        for item in ads_data:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∞–≤—Ç–æ—Ä–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if author_type and item.get('author_type') != author_type:
                continue
                
            url = item.get('url')
            if url:
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ URL –ø–æ–ª–Ω—ã–π
                if not url.startswith('http'):
                    url = f"https://www.cian.ru{url}"
                urls.append(url)
        
        return urls
    except (json.JSONDecodeError, KeyError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤: {str(e)}")
        return []

def extract_block_id_from_data(announcement_id):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç blockId –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ ID"""
    region_file = get_region_file()
    
    if not os.path.exists(region_file):
        return None
    
    try:
        with open(region_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        if "data" in data:
            ads_data = data["data"]
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            ads_data = data
        
        for item in ads_data:
            url = item.get('url', '')
            if announcement_id in url:
                return item.get('blockId')
        
        return None
    except (json.JSONDecodeError, KeyError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤: {str(e)}")
        return None

def extract_direct_phone_from_data(announcement_id):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä—è–º–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ ID"""
    region_file = get_region_file()
    
    if not os.path.exists(region_file):
        return None
    
    try:
        with open(region_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        if "data" in data:
            ads_data = data["data"]
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            ads_data = data
        
        for item in ads_data:
            url = item.get('url', '')
            if announcement_id in url:
                return item.get('directPhone')
        
        return None
    except (json.JSONDecodeError, KeyError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤: {str(e)}")
        return None

def format_phone(phone):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if not phone:
        return phone
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ +
    clean_phone = re.sub(r'[^\d+]', '', phone)
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
    if clean_phone.startswith('8') and len(clean_phone) == 11:
        clean_phone = '+7' + clean_phone[1:]
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 11 —Ü–∏—Ñ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º +
    elif clean_phone.startswith('7') and len(clean_phone) == 11:
        clean_phone = '+' + clean_phone
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –≤–∏–¥ +7 (XXX) XXX-XX-XX
    if clean_phone.startswith('+7') and len(clean_phone) == 12:
        return f"+7 ({clean_phone[2:5]}) {clean_phone[5:8]}-{clean_phone[8:10]}-{clean_phone[10:12]}"
    
    return clean_phone

def sanitize_payload(data):
    """–û—á–∏—â–∞–µ—Ç payload –æ—Ç None –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–∞–º"""
    if isinstance(data, dict):
        sanitized = {}
        for key, value in data.items():
            if value is not None:
                if isinstance(value, dict):
                    sanitized[key] = sanitize_payload(value)
                elif isinstance(value, list):
                    sanitized[key] = [sanitize_payload(item) for item in value if item is not None]
                else:
                    sanitized[key] = value
        return sanitized
    return data

def get_region_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏–æ–Ω–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    region_file = get_region_file()
    
    if not os.path.exists(region_file):
        return None
    
    try:
        with open(region_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if "region" in data and "created_at" in data:
            return {
                "name": data["region"]["name"],
                "id": data["region"]["id"],
                "created_at": data["created_at"]
            }
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        return {
            "name": get_region_name(),
            "id": get_region_id(),
            "created_at": "unknown"
        }
    except (json.JSONDecodeError, KeyError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–≥–∏–æ–Ω–µ: {str(e)}")
        return None

def get_setting(key, default=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with closing(sqlite3.connect(DB_NAME)) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT value FROM settings WHERE key = ?", (key,))
        result = cursor.fetchone()
        return result[0] if result else default

def set_setting(key, value):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    with closing(sqlite3.connect(DB_NAME)) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)",
            (key, value)
        )
        conn.commit()
import cianparser
import json
from datetime import datetime
import utils
import requests
import re
import time
from bs4 import BeautifulSoup

def _log(log_callback, message):
    if log_callback:
        log_callback(message)
    else:
        print(message)

def get_block_id_and_phone(url, log_callback=None):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç blockId –∏/–∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36'
        }
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        html_content = response.text
        
        block_id = None
        phone = None
        
        # –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º offerPhone - —ç—Ç–æ –≥–æ—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        offer_match = re.search(r'"offerPhone":\s*"([^"]+)"', html_content)
        if offer_match:
            phone = offer_match.group(1)
            msg = f"‚úÖ –ù–∞–π–¥–µ–Ω –≥–æ—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä offerPhone: {phone} –¥–ª—è {url}"
            _log(log_callback, msg)
            return block_id, phone  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–∑—É, blockId –Ω–µ –Ω—É–∂–µ–Ω
        
        # –ï—Å–ª–∏ offerPhone –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º siteBlockId (–¥–ª—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤)
        match = re.search(r'"siteBlockId":\s*(\d+)', html_content)
        if match:
            block_id = match.group(1)
            msg = f"–ù–∞–π–¥–µ–Ω blockId: {block_id} –¥–ª—è {url}"
            _log(log_callback, msg)
        else:
            msg = f"–ù–∏ offerPhone, –Ω–∏ siteBlockId –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {url}"
            _log(log_callback, msg)
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ HTML
        if phone is None:
            soup = BeautifulSoup(html_content, 'html.parser')
            phone_element = soup.select_one('[data-testid="PhoneLink"], .phone-number')
            if phone_element:
                phone = phone_element.get_text(strip=True)
                # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                phone = re.sub(r'[^\d+]', '', phone)
                msg = f"–ù–∞–π–¥–µ–Ω –ø—Ä—è–º–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ HTML: {phone} –¥–ª—è {url}"
                _log(log_callback, msg)
        
        return block_id, phone
    
    except Exception as e:
        msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        _log(log_callback, msg)
        return None, None

def parse_cian_ads(log_callback=None):
    """–ü–∞—Ä—Å–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å CIAN –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ regions.json"""
    log_message = f"[{datetime.now()}] –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π..."
    _log(log_callback, log_message)
    utils.ensure_output_dir()
    
    try:
        # –°–æ–∑–¥–∞–µ–º lock-—Ñ–∞–π–ª
        utils.start_parsing()
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        parser = cianparser.CianParser(location="–¢—é–º–µ–Ω—å")
        data = parser.get_flats(deal_type="sale", rooms=(1,2,3,4), additional_settings={"start_page":1, "end_page":1})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º URL
        for item in data:
            if 'url' in item and not item['url'].startswith('http'):
                item['url'] = f"https://www.cian.ru{item['url']}"
        
        # –ü–æ–ª—É—á–∞–µ–º blockId –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –í–°–ï–• –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç offerPhone)
        for item in data:
            url = item.get('url')
            if url:
                block_id, phone = get_block_id_and_phone(url, log_callback)
                item['blockId'] = block_id
                item['directPhone'] = phone
                # –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
                time.sleep(1.5)
            else:
                item['blockId'] = None
                item['directPhone'] = None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ
        region_file = utils.get_region_file()
        with open(region_file, 'w', encoding='utf-8') as f:
            json.dump({"data": data}, f, ensure_ascii=False, indent=2)
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –∞–≤—Ç–æ—Ä–æ–≤
        author_stats = {}
        phones_found = 0
        
        for item in data:
            author_type = item.get('author_type', 'unknown')
            if author_type not in author_stats:
                author_stats[author_type] = {'total': 0, 'with_phone': 0, 'with_blockid': 0}
            
            author_stats[author_type]['total'] += 1
            
            if item.get('directPhone'):
                author_stats[author_type]['with_phone'] += 1
                phones_found += 1
            
            if item.get('blockId'):
                author_stats[author_type]['with_blockid'] += 1
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        log_message = f"[{datetime.now()}] –£—Å–ø–µ—à–Ω–æ! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ {region_file}"
        _log(log_callback, log_message)
        
        _log(log_callback, "\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –ê–í–¢–û–†–û–í:")
        for author_type, stats in author_stats.items():
            _log(log_callback, f"  {author_type}: {stats['total']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, {stats['with_phone']} —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏, {stats['with_blockid']} —Å blockId")
        
        _log(log_callback, f"\nüìû –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {phones_found}/{len(data)}")
        
        return True, len(data)
    
    except Exception as e:
        log_message = f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}"
        _log(log_callback, log_message)
        return False, 0
    finally:
        # –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º lock-—Ñ–∞–π–ª
        utils.finish_parsing()
import cianparser
import json
from datetime import datetime
import utils
import requests
import re
import time
from bs4 import BeautifulSoup

def _log(log_callback, message):
    if log_callback:
        log_callback(message)
    else:
        print(message)

def get_block_id_and_phone(url, author_type, log_callback=None):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç blockId –∏/–∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–≤—Ç–æ—Ä–∞"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36'
        }
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        html_content = response.text
        
        block_id = None
        phone = None
        
        # –õ–û–ì–ò–ö–ê –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –¢–ò–ü–ê –ê–í–¢–û–†–ê
        if author_type == 'developer':
            # –î–õ–Ø –ó–ê–°–¢–†–û–ô–©–ò–ö–û–í: –∏—â–µ–º –¢–û–õ–¨–ö–û siteBlockId
            match = re.search(r'"siteBlockId":\s*(\d+)', html_content)
            if match:
                block_id = match.group(1)
                msg = f"‚úÖ –ù–∞–π–¥–µ–Ω siteBlockId –¥–ª—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞: {block_id} –¥–ª—è {url}"
                _log(log_callback, msg)
            else:
                msg = f"‚ùå siteBlockId –ù–ï –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {url}"
                _log(log_callback, msg)
        else:
            # –î–õ–Ø –û–°–¢–ê–õ–¨–ù–´–•: –∏—â–µ–º –¢–û–õ–¨–ö–û offerPhone
            offer_match = re.search(r'"offerPhone":\s*"([^"]+)"', html_content)
            if offer_match:
                phone = offer_match.group(1)
                msg = f"‚úÖ –ù–∞–π–¥–µ–Ω –≥–æ—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä offerPhone: {phone} –¥–ª—è {url}"
                _log(log_callback, msg)
            else:
                # –ï—Å–ª–∏ offerPhone –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ HTML
                soup = BeautifulSoup(html_content, 'html.parser')
                phone_element = soup.select_one('[data-testid="PhoneLink"], .phone-number')
                if phone_element:
                    phone = phone_element.get_text(strip=True)
                    # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    phone = re.sub(r'[^\d+]', '', phone)
                    msg = f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä—è–º–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ HTML: {phone} –¥–ª—è {url}"
                    _log(log_callback, msg)
                else:
                    msg = f"‚ùå offerPhone –ù–ï –Ω–∞–π–¥–µ–Ω –¥–ª—è –ù–ï-–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {url}"
                    _log(log_callback, msg)
        
        return block_id, phone
    
    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        _log(log_callback, msg)
        return None, None

def parse_cian_ads(log_callback=None):
    """–ü–∞—Ä—Å–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å CIAN –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ regions.json"""
    log_message = f"[{datetime.now()}] –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π..."
    _log(log_callback, log_message)
    utils.ensure_output_dir()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–∞ —Ä–µ–≥–∏–æ–Ω–∞
        if utils.should_refresh_region_file():
            _log(log_callback, "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞ —É—Å—Ç–∞—Ä–µ–ª–∏ (>1 –¥–Ω—è). –£–¥–∞–ª—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º...")
            utils.remove_region_file()
        
        # –°–æ–∑–¥–∞–µ–º lock-—Ñ–∞–π–ª
        utils.start_parsing()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        region_name = utils.get_region_name()
        region_id = utils.get_region_id()
        rooms = utils.get_rooms()
        min_floor = utils.get_min_floor()
        max_floor = utils.get_max_floor()
        min_price = utils.get_min_price()
        max_price = utils.get_max_price()
        
        log_message = f"üìç –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞: {region_name} (ID: {region_id})"
        _log(log_callback, log_message)
        log_message = f"üè† –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã: {', '.join(map(str, rooms))}"
        _log(log_callback, log_message)
        
        if min_floor:
            _log(log_callback, f"‚¨áÔ∏è –ú–∏–Ω. —ç—Ç–∞–∂: {min_floor}")
        if max_floor:
            _log(log_callback, f"‚¨ÜÔ∏è –ú–∞–∫—Å. —ç—Ç–∞–∂: {max_floor}")
        if min_price:
            _log(log_callback, f"üí∞ –ú–∏–Ω. —Ü–µ–Ω–∞: {min_price:,} ‚ÇΩ".replace(",", " "))
        if max_price:
            _log(log_callback, f"üí∞ –ú–∞–∫—Å. —Ü–µ–Ω–∞: {max_price:,} ‚ÇΩ".replace(",", " "))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        additional_settings = {
            "start_page": 1,
            "end_page": 1,
        }
        
        if min_floor:
            additional_settings["min_floor"] = min_floor
        if max_floor:
            additional_settings["max_floor"] = max_floor
        if min_price:
            additional_settings["min_price"] = min_price
        if max_price:
            additional_settings["max_price"] = max_price
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        parser = cianparser.CianParser(location=region_name)
        print(rooms , 'rooms')
        data = parser.get_flats(deal_type="sale", rooms=tuple(rooms), additional_settings=additional_settings)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º URL
        for item in data:
            if 'url' in item and not item['url'].startswith('http'):
                item['url'] = f"https://www.cian.ru{item['url']}"
        
        # –ü–æ–ª—É—á–∞–µ–º blockId –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –í–°–ï–• –æ–±—ä—è–≤–ª–µ–Ω–∏–π –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –¢–ò–ü–ê –ê–í–¢–û–†–ê
        for item in data:
            url = item.get('url')
            author_type = item.get('author_type')
            
            if url and author_type:
                block_id, phone = get_block_id_and_phone(url, author_type, log_callback)
                
                if author_type == 'developer':
                    # –î–ª—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º blockId, phone –æ—Å—Ç–∞–µ—Ç—Å—è None
                    item['blockId'] = block_id
                    item['directPhone'] = None
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ–º phone, blockId –æ—Å—Ç–∞–µ—Ç—Å—è None
                    item['blockId'] = None
                    item['directPhone'] = phone
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
                time.sleep(1.5)
            else:
                item['blockId'] = None
                item['directPhone'] = None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        result_data = {
            "created_at": datetime.utcnow().isoformat() + "Z",
            "region": {
                "name": region_name,
                "id": region_id
            },
            "rooms": rooms,
            "min_floor": min_floor,
            "max_floor": max_floor,
            "min_price": min_price,
            "max_price": max_price,
            "data": data
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ
        region_file = utils.get_region_file()
        with open(region_file, 'w', encoding='utf-8') as f:
            json.dump(result_data, f, ensure_ascii=False, indent=2)
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –∞–≤—Ç–æ—Ä–æ–≤
        author_stats = {}
        phones_found = 0
        block_ids_found = 0
        
        for item in data:
            author_type = item.get('author_type', 'unknown')
            if author_type not in author_stats:
                author_stats[author_type] = {'total': 0, 'with_phone': 0, 'with_blockid': 0}
            
            author_stats[author_type]['total'] += 1
            
            if item.get('directPhone'):
                author_stats[author_type]['with_phone'] += 1
                phones_found += 1
            
            if item.get('blockId'):
                author_stats[author_type]['with_blockid'] += 1
                block_ids_found += 1
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        log_message = f"[{datetime.now()}] –£—Å–ø–µ—à–Ω–æ! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ {region_file}"
        _log(log_callback, log_message)
        
        _log(log_callback, "\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –ê–í–¢–û–†–û–í:")
        for author_type, stats in author_stats.items():
            if author_type == 'developer':
                _log(log_callback, f"  üè¢ {author_type}: {stats['total']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, {stats['with_blockid']} —Å blockId (–¥–ª—è API)")
            else:
                _log(log_callback, f"  üë§ {author_type}: {stats['total']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, {stats['with_phone']} —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏")
        
        _log(log_callback, f"\nüìû –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (–ù–ï –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏): {phones_found}")
        _log(log_callback, f"üîó –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ blockId (–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏): {block_ids_found}")
        
        return True, len(data)
    
    except Exception as e:
        log_message = f"[{datetime.now()}] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}"
        _log(log_callback, log_message)
        return False, 0
    finally:
        # –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º lock-—Ñ–∞–π–ª
        utils.finish_parsing()
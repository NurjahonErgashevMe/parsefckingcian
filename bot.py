import os
import json
import time
import asyncio
import queue
import threading
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø–∞—Ä—Å–µ—Ä–∞
import utils
import parser_ads
import phones_parser
import config
import cianparser

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
parsing_in_progress = False
log_queue = queue.Queue()
current_log_message = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
dp = Dispatcher()

# Callback data –¥–ª—è –∫–Ω–æ–ø–æ–∫
class AuthorTypeCallback(CallbackData, prefix="author"):
    type: str

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class RegionState(StatesGroup):
    waiting_region_name = State()

async def delete_file_after_delay(file_path: str, delay_seconds: int = 10):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥"""
    try:
        await asyncio.sleep(delay_seconds)
        if os.path.exists(file_path):
            os.remove(file_path)
            print(f"üóëÔ∏è –§–∞–π–ª {file_path} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥")
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª {file_path} —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")

async def update_log_message(chat_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∞–º–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ"""
    global current_log_message, log_queue
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    logs = []
    while not log_queue.empty():
        logs.append(log_queue.get())
    
    if not logs:
        return
    
    log_text = "\n".join(logs)
    
    try:
        if current_log_message:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            current_text = current_log_message.text
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–æ–≤—ã–º–∏ –ª–æ–≥–∞–º–∏
            new_text = f"{current_text}\n{log_text}"
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
            if len(new_text) > 4096:
                new_text = new_text[-4096:]
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=current_log_message.message_id,
                text=new_text
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_text = log_text[-4096:] if len(log_text) > 4096 else log_text
            message = await bot.send_message(chat_id, new_text)
            current_log_message = message
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")

def log_callback(message: str):
    """Callback –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å"""
    log_queue.put(message)

def run_parser(author_type=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global parsing_in_progress
    
    try:
        utils.ensure_output_dir()
        region_file = utils.get_region_file()
        
        log_callback("\n" + "="*50)
        log_callback(f"CIAN Parser –∑–∞–ø—É—â–µ–Ω: {datetime.now()}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ª–æ–≥–æ–≤
        author_names = {
            'developer': 'üèóÔ∏è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏',
            'real_estate_agent': 'üè¢ –∞–≥–µ–Ω—Å—Ç–≤–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–µ–π',
            'homeowner': 'üè† –≤–ª–∞–¥–µ–ª—å—Ü—ã –¥–æ–º–æ–≤',
            'rieltor': 'üëî —Ä–∏—ç–ª—Ç–æ—Ä—ã'
        }
        author_display = author_names.get(author_type, 'üë• –≤—Å–µ —Ç–∏–ø—ã')
        log_callback(f"üéØ –¢–∏–ø –∞–≤—Ç–æ—Ä–æ–≤: {author_display}")
        log_callback("="*50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        if os.path.exists(region_file):
            try:
                with open(region_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                if "data" in data and len(data["data"]) > 0:
                    log_callback(f"–ù–∞–π–¥–µ–Ω–æ {len(data['data'])} –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤...")
                    # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ —Ç–∏–ø –∞–≤—Ç–æ—Ä–∞
                    parser = phones_parser.CianPhoneParser(
                        log_callback=log_callback,
                        clear_existing=True,
                        author_type=author_type
                    )
                    return parser.parse()
                    
            except (json.JSONDecodeError, KeyError) as e:
                log_callback(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤: {str(e)}. –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–Ω–≥.")
        
        log_callback("–§–∞–π–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç.")
        
        if utils.is_parsing_in_progress():
            log_callback("–ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
            
            while utils.is_parsing_in_progress():
                time.sleep(30)
                log_callback("–û–∂–∏–¥–∞–Ω–∏–µ...")
            
            log_callback("–ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤...")
            # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ —Ç–∏–ø –∞–≤—Ç–æ—Ä–∞
            parser = phones_parser.CianPhoneParser(
                log_callback=log_callback,
                clear_existing=True,
                author_type=author_type
            )
            return parser.parse()
        else:
            log_callback("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
            if parser_ads.parse_cian_ads(log_callback=log_callback):
                log_callback("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤...")
                # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ —Ç–∏–ø –∞–≤—Ç–æ—Ä–∞
                parser = phones_parser.CianPhoneParser(
                    log_callback=log_callback,
                    clear_existing=True,
                    author_type=author_type
                )
                return parser.parse()
    
    except Exception as e:
        log_callback(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
        return None
    finally:
        parsing_in_progress = False

def create_author_type_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–≤—Ç–æ—Ä–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üè¢ –ê–≥–µ–Ω—Å—Ç–≤–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–µ–π",
                callback_data=AuthorTypeCallback(type="real_estate_agent").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="üè† –í–ª–∞–¥–µ–ª—å—Ü—ã –¥–æ–º–æ–≤",
                callback_data=AuthorTypeCallback(type="homeowner").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="üëî –†–∏—ç–ª—Ç–æ—Ä—ã",
                callback_data=AuthorTypeCallback(type="realtor").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω",
                callback_data=AuthorTypeCallback(type="done").pack()
            )
        ]
    ])
    return keyboard

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöÄ –ü–∞—Ä—Å–∏—Ç—å")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞")]
        ],
        resize_keyboard=True
    )

def generate_regions_file():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    regions = cianparser.list_locations()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    regions.sort(key=lambda x: x[0].lower())
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    filename = "available_regions.txt"
    with open(filename, 'w', encoding='utf-8') as f:
        f.write("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:\n")
        f.write("=" * 50 + "\n\n")
        
        for region in regions:
            f.write(f"‚Ä¢ {region[0]} (ID: {region[1]})\n")
    
    return filename

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å CIAN.\n\n"
        "üéØ –ë–æ—Ç —É–º–µ–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –Ω–æ–º–µ—Ä–∞ –æ—Ç —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ—Ä–æ–≤:\n"
        "‚Ä¢ üèóÔ∏è –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏\n"
        "‚Ä¢ üè¢ –ê–≥–µ–Ω—Å—Ç–≤–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–µ–π\n"
        "‚Ä¢ üè† –í–ª–∞–¥–µ–ª—å—Ü—ã –¥–æ–º–æ–≤\n"
        "‚Ä¢ üëî –†–∏—ç–ª—Ç–æ—Ä—ã\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É 'üöÄ –ü–∞—Ä—Å–∏—Ç—å' –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /parse, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=create_main_keyboard()
    )

@dp.message(Command("parse"))
@dp.message(lambda message: message.text == "üöÄ –ü–∞—Ä—Å–∏—Ç—å")
async def parse_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /parse - –Ω–∞—á–∏–Ω–∞–µ—Ç —Å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤"""
    global parsing_in_progress, current_log_message
    
    if parsing_in_progress:
        await message.answer("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–≥–æ–≤
    current_log_message = None
    while not log_queue.empty():
        log_queue.get()
    
    parsing_in_progress = True
    log_callback("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_parser, args=(config.DEFAULT_TYPE,), daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤
    asyncio.create_task(log_updater(message.chat.id))

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞")
async def parsing_settings(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    current_region = utils.get_region_name()
    region_id = utils.get_region_id()
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω")],
            [KeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        f"‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:</b>\n"
        f"‚Ä¢ <b>–†–µ–≥–∏–æ–Ω:</b> {current_region}\n"
        f"‚Ä¢ <b>ID —Ä–µ–≥–∏–æ–Ω–∞:</b> {region_id}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω")
async def change_region(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞"""
    await state.set_state(RegionState.waiting_region_name)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏
    popular_regions = [
        "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–¢—é–º–µ–Ω—å" , "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å",
        "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–°–∞–º–∞—Ä–∞", "–û–º—Å–∫", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É"
    ]
    
    regions_text = "\n".join([f"‚Ä¢ {region}" for region in popular_regions])
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞:\n\n"
        "üîπ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:</b>\n"
        f"{regions_text}\n\n"
        "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤'",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )

@dp.message(F.text == "–°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤")
async def send_regions_list(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ–≥–∏–æ–Ω–æ–≤
        regions_file = generate_regions_file()
        file = FSInputFile(regions_file)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.answer_document(
            document=file,
            caption="üìã <b>–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤:</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ.",
            parse_mode="HTML"
        )
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        asyncio.create_task(delete_file_after_delay(regions_file, 30))
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Ä–µ–≥–∏–æ–Ω
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]],
                resize_keyboard=True
            )
        )
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤: {str(e)}")

@dp.message(RegionState.waiting_region_name)
async def process_region_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è
    if message.text == "–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await state.clear()
        await parsing_settings(message)
        return
        
    region_name = message.text.strip()
    locations = cianparser.list_locations()
    
    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    found = None
    for loc in locations:
        if loc[0].lower() == region_name.lower():
            found = loc
            break
    
    if found:
        region_id = found[1]
        utils.set_region(region_name, region_id)
        await state.clear()
        
        await message.answer(
            f"‚úÖ <b>–†–µ–≥–∏–æ–Ω –∏–∑–º–µ–Ω–µ–Ω</b>\n"
            f"‚Ä¢ <b>–ù–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω:</b> {region_name}\n"
            f"‚Ä¢ <b>ID —Ä–µ–≥–∏–æ–Ω–∞:</b> {region_id}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–∞—Ä—Å–∏–Ω–≥–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.",
            reply_markup=create_main_keyboard(),
            parse_mode="HTML"
        )
    else:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ
        similar = []
        for loc in locations:
            if region_name.lower() in loc[0].lower():
                similar.append(loc[0])
                if len(similar) >= 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–º 5 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                    break
        
        if similar:
            suggestions = "\n".join([f"‚Ä¢ {name}" for name in similar])
            await message.answer(
                f"‚ùå <b>–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n"
                f"{suggestions}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ:",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå –†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ:"
            )

@dp.message(F.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=create_main_keyboard()
    )

@dp.message(F.text == "–ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def back_to_settings(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await state.clear()
    await parsing_settings(message)

@dp.callback_query(AuthorTypeCallback.filter())
async def handle_author_type_selection(callback: types.CallbackQuery, callback_data: AuthorTypeCallback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–≤—Ç–æ—Ä–∞"""
    global parsing_in_progress, current_log_message
    
    await callback.answer()
    
    if callback_data.type == "done":
        await callback.message.edit_text(
            "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! üéâ\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /parse"
        )
        return
    
    if parsing_in_progress:
        await callback.message.answer("‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∞–≤—Ç–æ—Ä–∞
    author_names = {
        'real_estate_agent': 'üè¢ –∞–≥–µ–Ω—Å—Ç–≤–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–µ–π',
        'homeowner': 'üè† –≤–ª–∞–¥–µ–ª—å—Ü—ã –¥–æ–º–æ–≤',
        'rieltor': 'üëî —Ä–∏—ç–ª—Ç–æ—Ä—ã'
    }
    author_display = author_names.get(callback_data.type, callback_data.type)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–≥–æ–≤
    current_log_message = None
    while not log_queue.empty():
        log_queue.get()
    
    parsing_in_progress = True
    log_callback(f"‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É: {author_display}...")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"üöÄ –ó–∞–ø—É—â–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥: {author_display}\n\n"
        "–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_parser, args=(callback_data.type,), daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤
    asyncio.create_task(log_updater(callback.message.chat.id))

async def log_updater(chat_id: int):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∞–º–∏"""
    global parsing_in_progress
    
    while parsing_in_progress or not log_queue.empty():
        await update_log_message(chat_id)
        await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await update_log_message(chat_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏
        output_dir = "output"
        phone_files = [f for f in os.listdir(output_dir) if f.startswith("phones_") and f.endswith(".txt")]
        
        if phone_files:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –±–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π
            latest_file = max(phone_files, key=lambda f: os.path.getctime(os.path.join(output_dir, f)))
            file_path = os.path.join(output_dir, latest_file)
            
            file = FSInputFile(file_path)
            await bot.send_document(
                chat_id=chat_id,
                document=file,
                caption="üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            asyncio.create_task(delete_file_after_delay(file_path, delay_seconds=10))
            
            # –°–ø—Äa≈°–∏–≤–∞–µ–º –æ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–∞—Ä—Å–∏–Ω–≥–µ
            keyboard = create_author_type_keyboard()
            await bot.send_message(
                chat_id=chat_id,
                text="üéØ –ö–∞–∫–∏–µ —Ç–∏–ø—ã –∞–≤—Ç–æ—Ä–æ–≤ –µ—â–µ –Ω—É–∂–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç—å?\n\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω', –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ:\n\n"
                     "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞.",
                reply_markup=keyboard
            )
        else:
            await bot.send_message(
                chat_id, 
                "‚ùå –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–≤—Ç–æ—Ä–æ–≤."
            )
            
            # –í—Å–µ —Ä–∞–≤–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–∞—Ä—Å–∏–Ω–≥–µ
            keyboard = create_author_type_keyboard()
            await bot.send_message(
                chat_id=chat_id,
                text="üéØ –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø –∞–≤—Ç–æ—Ä–æ–≤?",
                reply_markup=keyboard
            )
    except Exception as e:
        await bot.send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–∞—Ä—Å–∏–Ω–≥–µ
        keyboard = create_author_type_keyboard()
        await bot.send_message(
            chat_id=chat_id,
            text="üéØ –ß—Ç–æ –±—É–¥–µ–º –ø–∞—Ä—Å–∏—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=keyboard
        )

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
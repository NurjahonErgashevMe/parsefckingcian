import json
import time
import os
import requests
import re
from datetime import datetime
from requests.exceptions import RequestException
import utils
import config
from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError

class CianPhoneParser:
    def __init__(self, max_phones=50, log_callback=None, clear_existing=False, author_type=None):
        utils.ensure_output_dir()
        self.parsed_data = {}
        self.max_phones = max_phones
        self.log_callback = log_callback
        self.current_headers = config.HEADERS.copy()
        self.current_payload_template = config.PAYLOAD_TEMPLATE.copy()
        self.author_type = author_type
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if clear_existing:
            self._clear_existing_files()
            
        self.load_existing_data()
        self.start_time = datetime.now()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ª–æ–≥–æ–≤
        author_names = {
            'developer': '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏',
            'real_estate_agent': '–∞–≥–µ–Ω—Å—Ç–≤–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–µ–π',
            'homeowner': '–≤–ª–∞–¥–µ–ª—å—Ü—ã –¥–æ–º–æ–≤',
            'rieltor': '—Ä–∏—ç–ª—Ç–æ—Ä—ã'
        }
        author_display = author_names.get(author_type, author_type or '–≤—Å–µ —Ç–∏–ø—ã')
        
        self._log(f"[{self.start_time}] –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤")
        self._log(f"üéØ –¢–∏–ø –∞–≤—Ç–æ—Ä–æ–≤: {author_display}")
        self._log(f"üìä –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï: –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–µ –±–æ–ª–µ–µ {self.max_phones} –Ω–æ–º–µ—Ä–æ–≤")
        if clear_existing:
            self._log("üóëÔ∏è –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä –¢–û–õ–¨–ö–û –¥–ª—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤
        if self.author_type == 'developer':
            self._log("üîß –¢–∏–ø 'developer' - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä + API")
            self._activate_browser()
        else:
            self._log("üîß –¢–∏–ø –ù–ï 'developer' - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ HTML –ø–∞—Ä—Å–∏–Ω–≥")

    def _activate_browser(self):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–µ—Ä —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä –¢–û–õ–¨–ö–û –¥–ª—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤"""
        self._log("üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ URL –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        urls = utils.extract_urls_from_regions(author_type='developer')
        if not urls:
            url = "https://tyumen.cian.ru/sale/flat/307997699/"  # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π URL
            self._log(f"‚ùå –ù–µ—Ç URL –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π URL: {url}")
        else:
            url = urls[0]
            self._log(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π URL –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {url}")
        
        intercepted_headers = None
        intercepted_payload = None
        
        try:
            with sync_playwright() as p:
                browser = p.chromium.launch(headless=False)
                context = browser.new_context()
                page = context.new_page()
                
                # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ API
                def handle_request(route, request):
                    nonlocal intercepted_headers, intercepted_payload
                    if request.url == config.API_URL and request.method == "POST":
                        intercepted_headers = dict(request.headers)
                        intercepted_payload = request.post_data_json
                        self._log(f"üì° –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ API: {request.url}")
                    route.continue_()
                
                page.route("**/*", handle_request)
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                page.goto(url, wait_until="domcontentloaded", timeout=60000)
                
                # –ö–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                try:
                    page.wait_for_selector('[data-testid="contacts-button"]', state="visible", timeout=15000)
                    page.click('[data-testid="contacts-button"]')
                    self._log("‚úÖ –ö–Ω–æ–ø–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞–∂–∞—Ç–∞")
                except Exception as e:
                    self._log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: {str(e)}")
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
                try:
                    page.wait_for_selector('[data-testid="PhoneLink"], .phone-number', state="attached", timeout=10000)
                    self._log("üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ—è–≤–∏–ª—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                except:
                    self._log("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
                page.wait_for_timeout(5000)
                browser.close()
        
        except Exception as e:
            self._log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä: {str(e)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if intercepted_headers and intercepted_payload:
            self._log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ payload –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            self.current_headers.update({
                "Cookie": intercepted_headers.get("cookie", self.current_headers.get("Cookie", "")),
                "Referer": intercepted_headers.get("referer", self.current_headers.get("Referer", "")),
                "Origin": intercepted_headers.get("origin", self.current_headers.get("Origin", ""))
            })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º payload
            self.current_payload_template.update({
                "blockId": intercepted_payload.get("blockId", self.current_payload_template.get("blockId", 0)),
                "platformType": intercepted_payload.get("platformType", self.current_payload_template.get("platformType", "")),
                "pageType": intercepted_payload.get("pageType", self.current_payload_template.get("pageType", "")),
                "placeType": intercepted_payload.get("placeType", self.current_payload_template.get("placeType", "")),
                "refererUrl": intercepted_payload.get("refererUrl", self.current_payload_template.get("refererUrl", "")),
                "utm": intercepted_payload.get("utm", self.current_payload_template.get("utm", ""))
            })
            
            self._log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            self._log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    def _clear_existing_files(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–Ω–æ–≤–æ"""
        files_to_remove = [
            utils.get_phones_file(),  # data.json
            "output/phones.txt"       # —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞
        ]
        
        for file_path in files_to_remove:
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                    self._log(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                except Exception as e:
                    self._log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
    
    def _log(self, message):
        if self.log_callback:
            self.log_callback(message)
        else:
            print(message)
    
    def extract_domain(self, url):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥–¥–æ–º–µ–Ω –∏–∑ URL"""
        match = re.search(r'https?://([a-z]+)\.cian\.ru', url)
        return match.group(1) if match else "www"
    
    def load_existing_data(self):
        phones_file = utils.get_phones_file()
        try:
            if os.path.exists(phones_file):
                with open(phones_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.parsed_data = data.get("data", {})
                self._log(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.parsed_data)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤")
            else:
                self._log("üìÇ –§–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")
        except (FileNotFoundError, json.JSONDecodeError):
            self._log("‚ùå –§–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")
            self.parsed_data = {}
    
    def save_data(self):
        with open(utils.get_phones_file(), 'w', encoding='utf-8') as f:
            json.dump({"data": self.parsed_data}, f, ensure_ascii=False, indent=2)
        self._log(f"üíæ [{datetime.now()}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.parsed_data)} –Ω–æ–º–µ—Ä–æ–≤")

    def parse_html_for_data(self, url):
        """–ü–∞—Ä—Å–∏—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–≤—Ç–æ—Ä–∞"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36'
            }
            response = requests.get(url, headers=headers, timeout=15)
            response.raise_for_status()
            html_content = response.text
            
            if self.author_type == 'developer':
                # –î–ª—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –∏—â–µ–º siteBlockId
                site_block_match = re.search(r'"siteBlockId":\s*(\d+)', html_content)
                if site_block_match:
                    site_block_id = int(site_block_match.group(1))
                    self._log(f"üèóÔ∏è –ù–∞–π–¥–µ–Ω siteBlockId –≤ HTML: {site_block_id}")
                    return {
                        "siteBlockId": site_block_id,
                        "type": "site_block"
                    }
                
                self._log(f"‚ùå siteBlockId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML –¥–ª—è {url}")
                return None
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏—â–µ–º offerPhone
                offer_match = re.search(r'"offerPhone":\s*"([^"]+)"', html_content)
                if offer_match:
                    phone = offer_match.group(1)
                    formatted_phone = utils.format_phone(phone)
                    self._log(f"üìû –ù–∞–π–¥–µ–Ω offerPhone –≤ HTML: {formatted_phone}")
                    return {
                        "phone": formatted_phone,
                        "notFormattedPhone": re.sub(r'\D', '', phone),
                        "type": "direct_phone"
                    }
                
                self._log(f"‚ùå offerPhone –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML –¥–ª—è {url}")
                return None
            
        except Exception as e:
            self._log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ HTML: {str(e)}")
            return None
    
    def fetch_phone_with_retry(self, announcement_id, url, site_block_id=None):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–¢–û–õ–¨–ö–û –¥–ª—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤)"""
        domain = self.extract_domain(url)
        location_url = f"https://tyumen.cian.ru/sale/flat/{announcement_id}/"
        
        headers = utils.sanitize_payload(self.current_headers)
        payload = self.current_payload_template.copy()
        payload = utils.sanitize_payload(payload)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º siteBlockId –∫–∞–∫ blockId –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
        if site_block_id is not None:
            payload["blockId"] = int(site_block_id)
            self._log(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º siteBlockId –∫–∞–∫ blockId: {site_block_id}")
        
        payload.update({
            "announcementId": int(announcement_id),
            "locationUrl": location_url,
        })
        
        attempts = 0
        max_attempts = 6
        
        while attempts < max_attempts:
            try:
                response = requests.post(
                    config.API_URL,
                    headers=headers,
                    json=payload,
                    timeout=15
                )
                response.raise_for_status()
                data = response.json()
                
                if "phone" in data and data["phone"]:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
                    data["phone"] = utils.format_phone(data["phone"])
                    return data
                else:
                    self._log(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempts+1}/{max_attempts}: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è ID {announcement_id}")
            
            except RequestException as e:
                self._log(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempts+1}/{max_attempts}: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è ID {announcement_id}: {str(e)}")
            except json.JSONDecodeError:
                self._log(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempts+1}/{max_attempts}: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –¥–ª—è ID {announcement_id}")
            
            attempts += 1
            if attempts < max_attempts:
                time.sleep(2)
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
        self._log(f"üåê –í—Å–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫ API –Ω–µ —É–¥–∞–ª–∏—Å—å. –ü—Ä–æ–±—É–µ–º Playwright –¥–ª—è ID {announcement_id}")
        try:
            with sync_playwright() as p:
                browser = p.chromium.launch(headless=True)
                context = browser.new_context()
                page = context.new_page()
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                page.goto(url, wait_until="domcontentloaded", timeout=60000)
                
                # –ö–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                try:
                    page.wait_for_selector('[data-testid="contacts-button"]', state="visible", timeout=10000)
                    page.click('[data-testid="contacts-button"]')
                except:
                    try:
                        page.evaluate('''() => {
                            const btn = document.querySelector('[data-testid="contacts-button"]');
                            if (btn) btn.click();
                        }''')
                    except:
                        pass
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
                try:
                    page.wait_for_selector('[data-testid="PhoneLink"], .phone-number', state="attached", timeout=10000)
                except:
                    pass
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä
                phone_element = page.query_selector('[data-testid="PhoneLink"], .phone-number')
                if phone_element:
                    phone_text = phone_element.inner_text()
                    # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    phone_text = re.sub(r'[^\d+]', '', phone_text)
                    self._log(f"üìû –ò–∑–≤–ª–µ—á–µ–Ω –Ω–æ–º–µ—Ä —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {phone_text}")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
                    formatted_phone = utils.format_phone(phone_text)
                    return {
                        "phone": formatted_phone,
                        "notFormattedPhone": phone_text
                    }
                
                browser.close()
        except Exception as e:
            self._log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä: {str(e)}")
        
        return None

    def get_filename_suffix(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å —Ä–µ–≥–∏–æ–Ω–æ–º, —Ç–∏–ø–æ–º –∞–≤—Ç–æ—Ä–∞ –∏ –≤—Ä–µ–º–µ–Ω–µ–º"""
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        region_id = utils.get_region_id() or "unknown"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–≤—Ç–æ—Ä–∞
        author_type = self.author_type or "all"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        timestamp = self.start_time.strftime("%d.%m.%Y-%H-%M-%S")
        
        return f"_{region_id}_{author_type}_{timestamp}"

    def export_phones_to_txt(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º"""
        suffix = self.get_filename_suffix()
        txt_file = f"output/phones{suffix}.txt"
        
        success_count = sum(1 for v in self.parsed_data.values() if v.get("phone") and v["phone"] != "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        author_names = {
            'developer': '–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏',
            'real_estate_agent': '–ê–≥–µ–Ω—Å—Ç–≤–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–µ–π',
            'homeowner': '–í–ª–∞–¥–µ–ª—å—Ü—ã –¥–æ–º–æ–≤',
            'rieltor': '–†–∏—ç–ª—Ç–æ—Ä—ã'
        }
        author_display = author_names.get(self.author_type, '–í—Å–µ —Ç–∏–ø—ã')
        
        with open(txt_file, 'w', encoding='utf-8') as f:
            f.write("üìä –û–¢–ß–ï–¢ –û –ü–ê–†–°–ò–ù–ì–ï –¢–ï–õ–ï–§–û–ù–ù–´–• –ù–û–ú–ï–†–û–í\n")
            f.write("="*60 + "\n\n")
            f.write(f"üìÖ –î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {self.start_time.strftime('%d.%m.%Y %H:%M:%S')}\n")
            f.write(f"üéØ –¢–∏–ø –∞–≤—Ç–æ—Ä–æ–≤: {author_display}\n")
            f.write(f"üåç –†–µ–≥–∏–æ–Ω: {utils.get_region_name()} (ID: {utils.get_region_id()})\n")
            f.write(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(self.parsed_data)}\n")
            f.write(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {success_count}\n")
            f.write(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {datetime.now() - self.start_time}\n")
            f.write(f"üéØ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {self.max_phones}\n\n")
            
            f.write("üìû –°–ü–ê–†–°–ï–ù–ù–´–ï –ù–û–ú–ï–†–ê:\n")
            f.write("="*60 + "\n")
            
            for aid, data in self.parsed_data.items():
                phone = data.get("phone", "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å")
                source = data.get("source", "unknown")
                source_emoji = {
                    "direct": "üìã",
                    "api": "üîó",
                    "html": "üåê",
                    "failed": "‚ùå"
                }.get(source, "‚ùì")
                
                f.write(f"üÜî ID: {aid}\n")
                f.write(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n")
                f.write(f"{source_emoji} –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n")
                f.write("-"*50 + "\n")
        
        self._log(f"üìÑ –ù–æ–º–µ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {txt_file}")
        self._log(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {success_count}/{len(self.parsed_data)}")
        return txt_file
    
    def parse(self):
        urls = utils.extract_urls_from_regions(author_type=self.author_type)
        if not urls:
            author_names = {
                'developer': '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏',
                'real_estate_agent': '–∞–≥–µ–Ω—Å—Ç–≤–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–µ–π',
                'homeowner': '–≤–ª–∞–¥–µ–ª—å—Ü—ã –¥–æ–º–æ–≤',
                'rieltor': '—Ä–∏—ç–ª—Ç–æ—Ä—ã'
            }
            author_display = author_names.get(self.author_type, '–≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∞–≤—Ç–æ—Ä–æ–≤')
            self._log(f"‚ùå –ù–µ—Ç URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏! –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ—Ç —Ç–∏–ø–∞ '{author_display}'")
            return None
        
        total_urls = len(urls)
        request_count = 0
        success_count = 0
        processed_count = 0
        
        author_names = {
            'developer': '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏',
            'real_estate_agent': '–∞–≥–µ–Ω—Å—Ç–≤–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–µ–π',
            'homeowner': '–≤–ª–∞–¥–µ–ª—å—Ü—ã –¥–æ–º–æ–≤',
            'rieltor': '—Ä–∏—ç–ª—Ç–æ—Ä—ã'
        }
        author_display = author_names.get(self.author_type, '–≤—Å–µ —Ç–∏–ø—ã')
        
        self._log(f"üìä –í—Å–µ–≥–æ URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_urls}")
        self._log(f"üéØ –¢–∏–ø –∞–≤—Ç–æ—Ä–æ–≤: {author_display}")
        self._log(f"üìà –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤: {self.max_phones}")
        
        for idx, url in enumerate(urls, 1):
            if processed_count >= self.max_phones:
                self._log(f"\nüéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ {self.max_phones} –Ω–æ–º–µ—Ä–æ–≤. –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                break
            
            aid = utils.extract_id_from_url(url)
            if not aid:
                self._log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ URL: {url}")
                continue
            
            if aid in self.parsed_data:
                self._log(f"‚è≠Ô∏è [{idx}/{total_urls}] –ü—Ä–æ–ø—É—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID: {aid}")
                continue
            
            self._log(f"üîç [{idx}/{total_urls}] –ó–∞–ø—Ä–æ—Å –¥–ª—è ID: {aid}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: developer vs –ù–ï developer
            if self.author_type == 'developer':
                # –î–ª—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ - –ø–∞—Ä—Å–∏–º HTML —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å siteBlockId, –∑–∞—Ç–µ–º –¥–µ–ª–∞–µ–º API –∑–∞–ø—Ä–æ—Å
                html_result = self.parse_html_for_data(url)
                
                if html_result and html_result.get("type") == "site_block":
                    site_block_id = html_result["siteBlockId"]
                    
                    # –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º API –∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º siteBlockId
                    api_result = self.fetch_phone_with_retry(aid, url, site_block_id)
                    request_count += 1
                    processed_count += 1
                    
                    if api_result and "phone" in api_result and api_result["phone"]:
                        self.parsed_data[aid] = {
                            "phone": api_result["phone"],
                            "notFormattedPhone": api_result.get("notFormattedPhone", re.sub(r'\D', '', api_result["phone"])),
                            "source": "api",
                            "siteBlockId": site_block_id
                        }
                        success_count += 1
                        self._log(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ API (siteBlockId={site_block_id}): {aid} => {api_result['phone']}")
                    else:
                        self.parsed_data[aid] = {
                            "phone": "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å",
                            "notFormattedPhone": "",
                            "source": "failed",
                            "siteBlockId": site_block_id
                        }
                        self._log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ API –¥–ª—è {aid} (siteBlockId={site_block_id})")
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ siteBlockId –≤ HTML
                    processed_count += 1
                    self.parsed_data[aid] = {
                        "phone": "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å",
                        "notFormattedPhone": "",
                        "source": "failed"
                    }
                    self._log(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω siteBlockId –≤ HTML –¥–ª—è {aid}")
            else:
                # –î–ª—è –ù–ï –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ - –ø–∞—Ä—Å–∏–º HTML —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å offerPhone –Ω–∞–ø—Ä—è–º—É—é
                html_result = self.parse_html_for_data(url)
                processed_count += 1
                
                if html_result and html_result.get("type") == "direct_phone":
                    self.parsed_data[aid] = {
                        "phone": html_result["phone"],
                        "notFormattedPhone": html_result.get("notFormattedPhone", ""),
                        "source": "html"
                    }
                    success_count += 1
                    self._log(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ HTML: {aid} => {html_result['phone']}")
                else:
                    self.parsed_data[aid] = {
                        "phone": "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å",
                        "notFormattedPhone": "",
                        "source": "failed"
                    }
                    self._log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –∏–∑ HTML –¥–ª—è {aid}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if idx % 5 == 0:
                self.save_data()
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if self.author_type == 'developer' and request_count % 50 == 0:
                self._log(f"‚è∏Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ {request_count} –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥...")
                time.sleep(15)
            else:
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è HTML –ø–∞—Ä—Å–∏–Ω–≥–∞
        
        self.save_data()
        
        end_time = datetime.now()
        duration = end_time - self.start_time
        
        self._log("\n" + "="*60)
        self._log(f"üèÅ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {end_time.strftime('%d.%m.%Y %H:%M:%S')}")
        self._log(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        self._log(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: {processed_count}/{self.max_phones}")
        self._log(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {success_count}/{processed_count}")
        if self.author_type == 'developer':
            self._log(f"üîó API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {request_count}")
        self._log("="*60 + "\n")
        
        return self.export_phones_to_txt()